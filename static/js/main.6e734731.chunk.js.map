{"version":3,"sources":["hooks/useLocalStorage.tsx","utils/keyGenerator.tsx","utils/emptyInterfaces.tsx","reducers/RouterConfigReducer.tsx","context/ReactConfigContext.tsx","hooks/useToggle.tsx","utils/ipAddress2network.tsx","utils/numberToSubnetMask.tsx","utils/ipAddress2diffusion.tsx","utils/router2script.tsx","components/CheckBoxes.tsx","components/GenratedScript.tsx","components/BasicRouterConfig.tsx","hooks/useForm.tsx","components/InputUseForm.tsx","components/DhcpConfig.tsx","components/Interface.tsx","components/InterfaceConfig.tsx","components/RouterConfiguration.tsx","components/RouterConfigurationScreen.tsx","components/RouterApp.tsx","App.tsx","index.tsx"],"names":["useSessionStorage","key","defaultValue","useStorage","window","sessionStorage","storageObject","useState","jsonValue","getItem","JSON","parse","value","setValue","useEffect","undefined","removeItem","setItem","stringify","removeValue","useCallback","keyGeneratorFunc","i","toString","RouterItemConfigurable","emptyRouterConfiguration","hostname","interfaces","security","bannerMord","encription","lineConsole","vty","hasRip","emptyRouterInterface","description","interfaceCableType","type","port","ipAddress","ipMask","dhcp","dnsServer","excluded","poolName","RouterConfigContext","createContext","routerConfig","dispatch","action","useToggle","initial","state","setState","toggle","RouterReducer","router","newState","payload","updateAllRouter","banner","setRip","console","eraseInterface","update","routerInterface","createNewInterface","regex","ipAddress2network","replace","number2subtnetMask","bitCount","mask","n","Math","min","push","pow","join","ipAddress2diffusion","router2script","script","ipNetworks","inter","network","diffussion","mascaraReal","Number","isFemale","textoInterface","ip","forEach","CheckBoxes","onChange","label","name","className","checked","htmlFor","GenratedScript","useContext","textJson","setTextJson","textScript","setTextScript","timeId","useRef","rowNumber","setRowNumber","shouldReload","toggleReload","current","clearTimeout","setTimeout","max","split","length","rows","spellCheck","newText","newRouter","target","error","BasicRouterConfig","placeholder","e","useForm","initialState","formulario","setFormulario","newValue","campo","clearFormulario","f","Object","keys","map","idx","InputUseForm","placeHolder","DhcpConfig","id_interface","dhcpInter","excludedAdds","cosa","trim","Interface","id","routerInter","setType","ipMas","ipAdd","descriptionForm","toggleIsFemale","cableInter","keyGenerator","InterfaceConfig","divRef","ref","onClick","next","RouterConfiguration","RouterConfigurationScreen","routerConfigParameters","useReducer","Provider","RouterApp","allRouters","setAllRouters","updateRouter","r","list","newList","log","entries","newKey","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e734731.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\n\r\nexport function useLocalStorage<T>(key: string, defaultValue: T) {\r\n\treturn useStorage(key, defaultValue, window.localStorage);\r\n}\r\nexport function useSessionStorage<T>(key: string, defaultValue: T) {\r\n\treturn useStorage(key, defaultValue, window.sessionStorage);\r\n}\r\n\r\nfunction useStorage<T>(\r\n\tkey: string,\r\n\tdefaultValue: T,\r\n\tstorageObject: Storage\r\n): [T | undefined, (v: T) => void, () => void] {\r\n\tconst [value, setValue] = useState<T | undefined>(() => {\r\n\t\tconst jsonValue = storageObject.getItem(key);\r\n\t\tif (jsonValue !== null) return JSON.parse(jsonValue) as T;\r\n\t\treturn defaultValue;\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tif (value === undefined) return storageObject.removeItem(key);\r\n\t\tstorageObject.setItem(key, JSON.stringify(value));\r\n\t}, [key, value, storageObject]);\r\n\r\n\tconst removeValue = useCallback(() => {\r\n\t\tsetValue(undefined);\r\n\t\tstorageObject.removeItem(key);\r\n\t}, []);\r\n\r\n\treturn [value, setValue, removeValue];\r\n}\r\n","export function* keyGeneratorFunc() {\r\n\tfor (let i = 0; ; i++) yield i.toString();\r\n}\r\n","import {\r\n\tRouterInterface,\r\n\tDHCPConfiguration,\r\n\tRouter,\r\n} from \"../types/redes-types\";\r\n\r\nexport const emptyRouterConfiguration: Router = {\r\n\thostname: \"\",\r\n\tinterfaces: {},\r\n\tsecurity: {\r\n\t\tbannerMord: \"\",\r\n\t\tencription: false,\r\n\t\tlineConsole: false,\r\n\t\tvty: false,\r\n\t},\r\n\thasRip: false,\r\n};\r\nexport const emptyDhcpConfiguration: DHCPConfiguration = {\r\n\tdnsServer: \"\",\r\n\texcluded: [],\r\n\tpoolName: \"\",\r\n};\r\n\r\nexport const emptyRouterInterface: RouterInterface = {\r\n\tdescription: \"\",\r\n\tinterfaceCableType: {\r\n\t\ttype: \"fastethernet\",\r\n\t\tport: \"\",\r\n\t},\r\n\tipAddress: \"\",\r\n\tipMask: \"\",\r\n\tdhcp: { ...emptyDhcpConfiguration },\r\n};\r\n","import { emptyRouterInterface } from \"../utils/emptyInterfaces\";\r\nimport { Router, RouterInterface } from \"../types/redes-types\";\r\n\r\nexport enum RouterItemConfigurable {\r\n\thostname,\r\n\tbanner,\r\n\tvty,\r\n\tconsole,\r\n\tencription,\r\n\teraseInterface,\r\n\tupdate,\r\n\tcreateNewInterface,\r\n\tsetRip,\r\n\tupdateAllRouter,\r\n}\r\n\r\nexport type RouterActions =\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.hostname;\r\n\t\t\tpayload: string;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.setRip;\r\n\t\t\tpayload: {\r\n\t\t\t\tvalue: boolean;\r\n\t\t\t};\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.updateAllRouter;\r\n\t\t\tpayload: {\r\n\t\t\t\trouter: Router;\r\n\t\t\t};\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.banner;\r\n\t\t\tpayload: string;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.vty;\r\n\t\t\tpayload: boolean;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.console;\r\n\t\t\tpayload: boolean;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.encription;\r\n\t\t\tpayload: boolean;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.eraseInterface;\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: string;\r\n\t\t\t};\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.createNewInterface;\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: string;\r\n\t\t\t};\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.update;\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: string;\r\n\t\t\t\trouterInterface: RouterInterface;\r\n\t\t\t};\r\n\t  };\r\n\r\nexport const RouterReducer = (\r\n\trouter: Router,\r\n\taction: RouterActions\r\n): Router => {\r\n\tlet newState: typeof router;\r\n\r\n\tswitch (action.type) {\r\n\t\tcase RouterItemConfigurable.hostname:\r\n\t\t\treturn { ...router, hostname: action.payload };\r\n\t\tcase RouterItemConfigurable.updateAllRouter:\r\n\t\t\treturn action.payload.router;\r\n\t\tcase RouterItemConfigurable.banner:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.security.bannerMord = action.payload;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.setRip:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.hasRip = action.payload.value;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.vty:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.security.vty = action.payload;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.console:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.security.lineConsole = action.payload;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.encription:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.security.encription = action.payload;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.eraseInterface:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tdelete newState.interfaces[action.payload.key];\r\n\t\t\treturn newState;\r\n\r\n\t\tcase RouterItemConfigurable.update: {\r\n\t\t\tnewState = { ...router };\r\n\r\n\t\t\tconst { key, routerInterface } = action.payload;\r\n\r\n\t\t\tnewState.interfaces[key] = routerInterface;\r\n\r\n\t\t\treturn newState;\r\n\t\t}\r\n\t\tcase RouterItemConfigurable.createNewInterface: {\r\n\t\t\tnewState = { ...router };\r\n\r\n\t\t\tconst { key } = action.payload;\r\n\r\n\t\t\tnewState.interfaces[key] = { ...emptyRouterInterface };\r\n\r\n\t\t\treturn newState;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn router;\r\n\t}\r\n};\r\n","import { createContext } from \"react\";\r\nimport { RouterActions } from \"../reducers/RouterConfigReducer\";\r\nimport { Router } from \"../types/redes-types\";\r\nimport { emptyRouterConfiguration } from \"../utils/emptyInterfaces\";\r\n\r\nexport const RouterConfigContext = createContext<{\r\n\trouterConfig: Router;\r\n\tdispatch: (action: RouterActions) => void;\r\n}>({\r\n\trouterConfig: emptyRouterConfiguration,\r\n\tdispatch: (action: RouterActions) => {},\r\n});\r\n","import { useState } from \"react\";\r\n\r\nexport const useToggle = (initial: boolean = false): [boolean, () => void] => {\r\n\tconst [state, setState] = useState(initial);\r\n\r\n\tconst toggle = () => {\r\n\t\tsetState(!state);\r\n\t};\r\n\r\n\treturn [state, toggle];\r\n};\r\n","const regex = /(\\d+\\.\\d+\\.\\d+)\\.\\d+/gm;\r\nconst subst = `$1.0`;\r\n\r\nexport const ipAddress2network = (ipAddress: string): string => {\r\n\treturn ipAddress.replace(regex, subst);\r\n};\r\n","export const number2subtnetMask = (bitCount: number) => {\r\n\tconst mask = [];\r\n\tfor (let i = 0; i < 4; i++) {\r\n\t\tconst n = Math.min(bitCount, 8);\r\n\t\tmask.push(256 - Math.pow(2, 8 - n));\r\n\t\tbitCount -= n;\r\n\t}\r\n\treturn mask.join(\".\");\r\n};\r\n","const regex = /(\\d+\\.\\d+\\.\\d+)\\.\\d+/gm;\r\nconst subst = `$1.255`;\r\n\r\nexport const ipAddress2diffusion = (ipAddress: string): string => {\r\n\treturn ipAddress.replace(regex, subst);\r\n};\r\n","import { Router } from \"../types/redes-types\";\r\nimport { ipAddress2network } from \"./ipAddress2network\";\r\nimport { number2subtnetMask } from \"./numberToSubnetMask\";\r\nimport { ipAddress2diffusion } from \"./ipAddress2diffusion\";\r\n\r\nconst lineConsole = `enable secret cisco\r\nline console 0\r\npassword cisco\r\nlogin\r\nexit`;\r\n\r\nconst lineVty = `line vty 0 4\r\npassword cisco\r\nlogin\r\nexit`;\r\n\r\nconst encription = \"service password-encryption\";\r\n\r\n// ! hacer que tenga mascara el dhcp network\r\nexport const router2script = (router: Router): string => {\r\n\tconst { hostname, security, hasRip } = router;\r\n\r\n\tlet script = `\r\nenable\r\nconfigure terminal \r\nhostname ${hostname}\r\n${security.lineConsole ? lineConsole : \"\"}\r\n${security.vty ? lineVty : \"\"}\r\nbanner motd #${security.bannerMord}#\r\n${security.encription ? encription : \"\"}\r\n`;\r\n\r\n\tconst ipNetworks: string[] = [];\r\n\r\n\t// Interfaces\r\n\tfor (const key in router.interfaces) {\r\n\t\tconst inter = router.interfaces[key];\r\n\r\n\t\tconst { description, ipAddress, ipMask, interfaceCableType, dhcp } = inter;\r\n\r\n\t\tconst { dnsServer, excluded, poolName } = dhcp;\r\n\r\n\t\tconst { port, type } = interfaceCableType;\r\n\t\tconst network = ipAddress2network(ipAddress),\r\n\t\t\tdiffussion = ipAddress2diffusion(ipAddress),\r\n\t\t\tmascaraReal = number2subtnetMask(Number(ipMask));\r\n\r\n\t\thasRip && ipNetworks.push(network);\r\n\r\n\t\tlet isFemale =\r\n\t\t\tinter.interfaceCableType.type === \"serial\"\r\n\t\t\t\t? inter.interfaceCableType.isFemale\r\n\t\t\t\t: false;\r\n\r\n\t\tconst textoInterface = `interface ${type} ${port}\r\n${isFemale ? \"clock rate 64000\" : \"\"}\r\ndescription ${description}\r\nip address ${ipAddress} ${mascaraReal}\r\nno shutdown\r\nexit\r\n`;\r\n\r\n\t\tscript += textoInterface;\r\n\r\n\t\tif (interfaceCableType.type === \"serial\") continue;\r\n\t\tscript += `ip dhcp pool ${poolName}\r\ndefault-router ${ipAddress}\r\nnetwork ${network} ${mascaraReal}\r\n${dnsServer !== \"\" ? `dns-server ${dnsServer}` : \"\"}\r\nip dhcp excluded-address ${ipAddress}\r\nip dhcp excluded-address ${diffussion}\r\n${\r\n\tdiffussion === dnsServer || dnsServer === \"\"\r\n\t\t? \"\"\r\n\t\t: `ip dhcp excluded-address ${dnsServer}`\r\n}\r\n`;\r\n\r\n\t\tfor (const ip of excluded) {\r\n\t\t\tif (ip === \"\") continue;\r\n\t\t\tscript += `ip dhcp excluded-address ${ip}\\n`;\r\n\t\t}\r\n\t}\r\n\r\n\t// Rip\r\n\r\n\tif (hasRip) {\r\n\t\tscript += \"router rip\\nversion 2\\n\";\r\n\r\n\t\tipNetworks.forEach((network) => {\r\n\t\t\tscript += `network ${network}\\n`;\r\n\t\t});\r\n\t}\r\n\r\n\tscript += \"exit\\n\";\r\n\treturn script;\r\n};\r\n","import { FC } from \"react\";\r\n\r\ninterface props {\r\n\tlabel: string;\r\n\tvalue: boolean;\r\n\tonChange: () => void;\r\n\tname: string;\r\n}\r\n\r\nexport const CheckBoxes: FC<props> = ({ onChange, label, value, name }) => {\r\n\treturn (\r\n\t\t<div className=\"form-check\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"form-check-input\"\r\n\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\tchecked={value}\r\n\t\t\t\tname={name}\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t/>\r\n\t\t\t<label className=\"form-check-label\" htmlFor={name}>\r\n\t\t\t\t{label}\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { useToggle } from \"../hooks/useToggle\";\r\nimport { RouterItemConfigurable } from \"../reducers/RouterConfigReducer\";\r\nimport { router2script } from \"../utils/router2script\";\r\nimport { CheckBoxes } from \"./CheckBoxes\";\r\nimport { RouterInterface, Router } from \"../types/redes-types\";\r\n\r\nexport const GenratedScript = () => {\r\n\tconst { routerConfig, dispatch } = useContext(RouterConfigContext);\r\n\r\n\tconst [textJson, setTextJson] = useState(\"\");\r\n\tconst [textScript, setTextScript] = useState(\"\");\r\n\tconst timeId = useRef<NodeJS.Timeout | null>(null);\r\n\tconst [rowNumber, setRowNumber] = useState(20);\r\n\tconst [shouldReload, toggleReload] = useToggle(true);\r\n\r\n\tuseEffect(() => {\r\n\t\ttimeId.current && clearTimeout(timeId.current);\r\n\t\tif (!shouldReload) return;\r\n\t\ttimeId.current = setTimeout(() => {\r\n\t\t\tsetTextJson(JSON.stringify(routerConfig, null, 2));\r\n\t\t\tsetTextScript(router2script(routerConfig));\r\n\t\t\tsetRowNumber(\r\n\t\t\t\tMath.max(\r\n\t\t\t\t\t10,\r\n\t\t\t\t\ttextJson.split(/\\r\\n|\\r|\\n/).length,\r\n\t\t\t\t\ttextScript.split(/\\r\\n|\\r|\\n/).length\r\n\t\t\t\t) + 4\r\n\t\t\t);\r\n\t\t}, 1000);\r\n\t}, [routerConfig, shouldReload]);\r\n\r\n\treturn (\r\n\t\t<p className=\"container mt-2 border-top\">\r\n\t\t\t<h2 className=\"text-center\">\r\n\t\t\t\tScript de {routerConfig.hostname || \"router\"}\r\n\t\t\t</h2>\r\n\t\t\t<p>\r\n\t\t\t\tAqui es donde se genera el script.\r\n\t\t\t\t<b>\r\n\t\t\t\t\tSi cambias algo en los campos de arriba, se verán reflejados aqui\r\n\t\t\t\t\tabajo.\r\n\t\t\t\t</b>\r\n\t\t\t\tSin embargo, tu puedes cambiar lo que quieras en el script, y\r\n\t\t\t\tpermanecerá aqui. También, puedes hacer tu propio archivo de\r\n\t\t\t\tconfiguración json. Si es válido, se generará el router.\r\n\t\t\t</p>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<p className=\"offset-md-5 col-md-5\">\r\n\t\t\t\t\tAdicionalmente, puedes desactivar que se genere aqui:\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"col-md-2 text\">\r\n\t\t\t\t\t<CheckBoxes\r\n\t\t\t\t\t\tlabel=\"Generar Código\"\r\n\t\t\t\t\t\tname=\"hot-reload\"\r\n\t\t\t\t\t\tonChange={toggleReload}\r\n\t\t\t\t\t\tvalue={shouldReload}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-5 order-1 order-md-0\">\r\n\t\t\t\t\t<h3>JSON generado </h3>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tvalue={textJson}\r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\trows={rowNumber}\r\n\t\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\t\tonChange={({ target }) => {\r\n\t\t\t\t\t\t\tlet newText: string;\r\n\t\t\t\t\t\t\tlet newRouter: Router;\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tnewRouter = JSON.parse(target.value) as Router;\r\n\t\t\t\t\t\t\t\tnewText = router2script(newRouter);\r\n\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsetTextJson(target.value);\r\n\t\t\t\t\t\t\tsetTextScript(newText);\r\n\r\n\t\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\t\ttype: RouterItemConfigurable.updateAllRouter,\r\n\t\t\t\t\t\t\t\tpayload: {\r\n\t\t\t\t\t\t\t\t\trouter: newRouter,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t></textarea>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-7\">\r\n\t\t\t\t\t<h3>Script generado </h3>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tvalue={textScript}\r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\trows={rowNumber}\r\n\t\t\t\t\t\tonChange={({ target }) => {\r\n\t\t\t\t\t\t\tsetTextScript(target.value);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\t></textarea>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</p>\r\n\t);\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { CheckBoxes } from \"./CheckBoxes\";\r\nimport { RouterItemConfigurable } from \"../reducers/RouterConfigReducer\";\r\nexport const BasicRouterConfig = () => {\r\n\tconst { routerConfig, dispatch } = useContext(RouterConfigContext);\r\n\r\n\tconst { hostname, security, hasRip } = routerConfig;\r\n\r\n\tconst { bannerMord, encription, lineConsole, vty } = security;\r\n\r\n\treturn (\r\n\t\t<div className=\"row p-2\">\r\n\t\t\t<h3 className=\"text-center mt-2\">Configuración básica</h3>\r\n\t\t\t<div className=\"col col-5\">\r\n\t\t\t\t<label htmlFor=\"hostname\" className=\"form-label\">\r\n\t\t\t\t\tHostname del Router:\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tname=\"hostname\"\r\n\t\t\t\t\tplaceholder=\"Hostname\"\r\n\t\t\t\t\tvalue={hostname}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.hostname,\r\n\t\t\t\t\t\t\tpayload: e.target.value,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<label htmlFor=\"banner\" className=\"form-label\">\r\n\t\t\t\t\tPoner el Banner motd\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tname=\"banner\"\r\n\t\t\t\t\tplaceholder=\"banner\"\r\n\t\t\t\t\tvalue={bannerMord}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.banner,\r\n\t\t\t\t\t\t\tpayload: e.target.value,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t{/* Chekc boxes */}\r\n\r\n\t\t\t<div className=\"col col-6\">\r\n\t\t\t\t<CheckBoxes\r\n\t\t\t\t\tlabel={\"Tiene encription\"}\r\n\t\t\t\t\tname={\"encription\"}\r\n\t\t\t\t\tvalue={encription}\r\n\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.encription,\r\n\t\t\t\t\t\t\tpayload: !encription,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<CheckBoxes\r\n\t\t\t\t\tlabel={\"Tiene line console security\"}\r\n\t\t\t\t\tname={\"lineconsole\"}\r\n\t\t\t\t\tvalue={lineConsole}\r\n\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.console,\r\n\t\t\t\t\t\t\tpayload: !lineConsole,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<CheckBoxes\r\n\t\t\t\t\tlabel={\"Tiene vty\"}\r\n\t\t\t\t\tname={\"vty\"}\r\n\t\t\t\t\tvalue={vty}\r\n\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.vty,\r\n\t\t\t\t\t\t\tpayload: !vty,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<CheckBoxes\r\n\t\t\t\t\tlabel={\"Tiene rip\"}\r\n\t\t\t\t\tname={\"vty\"}\r\n\t\t\t\t\tvalue={hasRip}\r\n\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.setRip,\r\n\t\t\t\t\t\t\tpayload: { value: !hasRip },\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = <T extends Object>(initialState: T) => {\r\n\tconst [formulario, setFormulario] = useState<T>(initialState);\r\n\r\n\tconst onChange = (newValue: string, campo: keyof T) => {\r\n\t\tsetFormulario({\r\n\t\t\t...formulario,\r\n\t\t\t[campo]: newValue,\r\n\t\t});\r\n\t};\r\n\r\n\tconst clearFormulario = () => {\r\n\t\tsetFormulario((f) => {\r\n\t\t\tObject.keys(f).map((key, idx) => {\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tf[key] = \"\";\r\n\t\t\t});\r\n\t\t\treturn f;\r\n\t\t});\r\n\t};\r\n\r\n\treturn {\r\n\t\t...formulario,\r\n\t\tformulario,\r\n\t\tonChange,\r\n\t\tclearFormulario,\r\n\t};\r\n};\r\n\r\n/** Example\r\n * export const Formularios = () => {\r\n\tconst { email, password, onChange, formulario } = useForm({\r\n\t\tpassword: \"871984\",\r\n\t\temail: \"josifj@uiwfh.com\",\r\n\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>Formularios</h3>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tclassName=\"form-control my-2\"\r\n\t\t\t\tplaceholder=\"Tu password\"\r\n\t\t\t\tvalue={password}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value, \"password\")}\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"email\"\r\n\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\tplaceholder=\"Tu email\"\r\n\t\t\t\tvalue={email}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value, \"email\")}\r\n\t\t\t/>\r\n\t\t\t<p>\r\n\t\t\t\t<pre>{JSON.stringify(formulario)}</pre>\r\n\t\t\t</p>\r\n\t\t</>\r\n\t);\r\n};\r\n * \r\n * \r\n */\r\n","import React, { FC } from \"react\";\r\n\r\ninterface Props {\r\n\tname: string;\r\n\tlabel: string;\r\n\tplaceHolder: string;\r\n\tvalue: string;\r\n\tonChange: Function;\r\n}\r\n\r\nexport const InputUseForm: FC<Props> = ({\r\n\tname,\r\n\tlabel,\r\n\tplaceHolder,\r\n\tvalue,\r\n\tonChange,\r\n}) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<label htmlFor={name} className=\"form-label\">\r\n\t\t\t\t{label}\r\n\t\t\t</label>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\tname={name}\r\n\t\t\t\tplaceholder={placeHolder}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\tonChange(e.target.value, name);\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { FC, useContext, useEffect } from \"react\";\r\nimport { RouterInterface } from \"../types/redes-types\";\r\nimport { useForm } from \"../hooks/useForm\";\r\nimport { InputUseForm } from \"./InputUseForm\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { RouterItemConfigurable } from \"../reducers/RouterConfigReducer\";\r\n\r\ninterface Props {\r\n\tid_interface: string;\r\n\trouterInterface: RouterInterface;\r\n}\r\n\r\nexport const DhcpConfig: FC<Props> = ({ id_interface, routerInterface }) => {\r\n\tconst { dispatch } = useContext(RouterConfigContext);\r\n\r\n\tconst { dhcp: dhcpInter } = routerInterface;\r\n\r\n\tconst { dnsServer, poolName, excluded, formulario, onChange } = useForm({\r\n\t\tdnsServer: dhcpInter.dnsServer,\r\n\t\tpoolName: dhcpInter.poolName,\r\n\t\texcluded: dhcpInter.excluded.join(\",\"),\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst excludedAdds = formulario.excluded\r\n\t\t\t.split(\",\")\r\n\t\t\t.map((cosa) => cosa.trim());\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: RouterItemConfigurable.update,\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: id_interface,\r\n\t\t\t\trouterInterface: {\r\n\t\t\t\t\t...routerInterface,\r\n\t\t\t\t\tdhcp: {\r\n\t\t\t\t\t\tdnsServer,\r\n\t\t\t\t\t\tpoolName,\r\n\t\t\t\t\t\texcluded: excludedAdds,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\t}, [dispatch, dnsServer, excluded, poolName]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h5>DHCP Configuration {`DHCP::${poolName}` ?? \"\"}</h5>\r\n\t\t\t<div className=\"dhcp-config-form\">\r\n\t\t\t\t<InputUseForm\r\n\t\t\t\t\tlabel=\"Pon el nombre del pool name\"\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tvalue={poolName}\r\n\t\t\t\t\tplaceHolder={\"Pon el poolName\"}\r\n\t\t\t\t\tname={\"poolName\"}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<InputUseForm\r\n\t\t\t\t\tlabel=\"Pon la ip del dnsServer\"\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tvalue={dnsServer}\r\n\t\t\t\t\tplaceHolder={\"Pon el dnsServer\"}\r\n\t\t\t\t\tname={\"dnsServer\"}\r\n\t\t\t\t/>\r\n\t\t\t\t<InputUseForm\r\n\t\t\t\t\tlabel=\"Pon las ip excluidas, separadas por commas\"\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tvalue={excluded}\r\n\t\t\t\t\tplaceHolder={\"Pon el excluded\"}\r\n\t\t\t\t\tname={\"excluded\"}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { useState, useContext } from \"react\";\r\nimport { CheckBoxes } from \"./CheckBoxes\";\r\nimport { useForm } from \"../hooks/useForm\";\r\nimport { useEffect } from \"react\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { RouterItemConfigurable } from \"../reducers/RouterConfigReducer\";\r\nimport { RouterInterface, RouterInterfaceCables } from \"../types/redes-types\";\r\nimport { useToggle } from \"../hooks/useToggle\";\r\nimport { DhcpConfig } from \"./DhcpConfig\";\r\nimport { InputUseForm } from \"./InputUseForm\";\r\n\r\ntype CableTypes = \"serial\" | \"fastethernet\" | \"gigabitethernet\";\r\n\r\nexport const Interface: FC<{ id: string; routerInter: RouterInterface }> = ({\r\n\tid,\r\n\trouterInter,\r\n}) => {\r\n\tconst { description, interfaceCableType, ipMask, ipAddress } = routerInter;\r\n\r\n\tconst { dispatch } = useContext(RouterConfigContext);\r\n\r\n\tconst [type, setType] = useState(interfaceCableType.type);\r\n\r\n\tconst { onChange, ipAdd, ipMas, descriptionForm, port } = useForm({\r\n\t\tipMas: ipMask,\r\n\t\tipAdd: ipAddress,\r\n\t\tport: interfaceCableType.port,\r\n\t\tdescriptionForm: description,\r\n\t});\r\n\r\n\tconst [isFemale, toggleIsFemale] = useToggle(\r\n\t\tinterfaceCableType.type === \"serial\" && interfaceCableType.isFemale\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst cableInter: RouterInterfaceCables =\r\n\t\t\ttype === \"serial\"\r\n\t\t\t\t? {\r\n\t\t\t\t\t\ttype: \"serial\",\r\n\t\t\t\t\t\tisFemale,\r\n\t\t\t\t\t\tport,\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\t\ttype,\r\n\r\n\t\t\t\t\t\tport,\r\n\t\t\t\t  };\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: RouterItemConfigurable.update,\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: id,\r\n\t\t\t\trouterInterface: {\r\n\t\t\t\t\t...routerInter,\r\n\t\t\t\t\tdescription: descriptionForm,\r\n\t\t\t\t\tinterfaceCableType: cableInter,\r\n\t\t\t\t\tipAddress: ipAdd,\r\n\t\t\t\t\tipMask: ipMas,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\t}, [isFemale, descriptionForm, dispatch, id, ipAdd, ipMas, port, type]);\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t<strong>Select Type of cable</strong>\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tclassName=\"form-select\"\r\n\t\t\t\t\t\taria-label=\"Default select example\"\r\n\t\t\t\t\t\tvalue={type}\r\n\t\t\t\t\t\tonChange={(e) => setType(e.target.value as CableTypes)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value={\"fastethernet\"}>Fast Ethernet</option>\r\n\t\t\t\t\t\t<option value={\"serial\"}>Serial </option>\r\n\t\t\t\t\t\t<option value={\"gigabitethernet\"}>Gigabit</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t{type === \"serial\" && (\r\n\t\t\t\t\t\t<CheckBoxes\r\n\t\t\t\t\t\t\tlabel=\"Es hembra?\"\r\n\t\t\t\t\t\t\tvalue={isFemale}\r\n\t\t\t\t\t\t\tname=\"es-hembra\"\r\n\t\t\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\t\t\ttoggleIsFemale();\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t<InputUseForm\r\n\t\t\t\t\t\tlabel=\"Pon el port number\"\r\n\t\t\t\t\t\tname=\"port\"\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\tplaceHolder=\"Port number\"\r\n\t\t\t\t\t\tvalue={port}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<InputUseForm\r\n\t\t\t\t\t\tlabel=\"Pon el description\"\r\n\t\t\t\t\t\tname=\"descriptionForm\"\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\tplaceHolder=\"description\"\r\n\t\t\t\t\t\tvalue={descriptionForm}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<strong>Ip address</strong> <br />\r\n\t\t\t<small>Pones la direccion normal y luego pones diagonal algo</small>\r\n\t\t\t<div className=\"input-group\">\r\n\t\t\t\t<div className=\"col-9\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tclassName=\"form-control col-9\"\r\n\t\t\t\t\t\tname=\"ipAddress\"\r\n\t\t\t\t\t\tplaceholder=\"ipAddress del router\"\r\n\t\t\t\t\t\tvalue={ipAdd}\r\n\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\tonChange(e.target.value, \"ipAdd\");\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<span className=\"input-group-text\">/</span>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tname=\"ipMask\"\r\n\t\t\t\t\tplaceholder=\"ex. 24\"\r\n\t\t\t\t\tvalue={ipMas}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tonChange(e.target.value, \"ipMas\");\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t{routerInter.interfaceCableType.type !== \"serial\" && (\r\n\t\t\t\t<div className=\"dhcp-config-container mt-4\">\r\n\t\t\t\t\t<DhcpConfig id_interface={id} routerInterface={routerInter} />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport { Interface } from \"./Interface\";\r\nimport { useContext } from \"react\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { RouterItemConfigurable } from \"../reducers/RouterConfigReducer\";\r\nimport { keyGeneratorFunc } from \"../utils/keyGenerator\";\r\n\r\nconst keyGenerator = keyGeneratorFunc();\r\n\r\nexport const InterfaceConfig = () => {\r\n\tconst { routerConfig, dispatch } = useContext(RouterConfigContext);\r\n\r\n\tconst divRef = useRef<null | HTMLDivElement>(null);\r\n\r\n\tconst handleAdding = () => {\r\n\t\tconst key = (keyGenerator?.next()?.value as string) ?? \"1\";\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: RouterItemConfigurable.createNewInterface,\r\n\t\t\tpayload: {\r\n\t\t\t\tkey,\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className=\"text-center mt-3 border-bottom\">\r\n\t\t\t\tConfiguración de las interfaces\r\n\t\t\t</h3>\r\n\t\t\t<div className=\"interfaces\" ref={divRef}>\r\n\t\t\t\t{Object.keys(routerConfig.interfaces).map((key) => {\r\n\t\t\t\t\tconst inter = routerConfig.interfaces[key];\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div key={key} className=\"interface row border-bottom p-3 p-md-1\">\r\n\t\t\t\t\t\t\t<div className=\"my-1\">\r\n\t\t\t\t\t\t\t\t<Interface id={key} routerInter={inter} />\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger col-4 offset-4 mt-2\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\t\t\t\t\ttype: RouterItemConfigurable.eraseInterface,\r\n\t\t\t\t\t\t\t\t\t\t\tpayload: {\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tEliminar interface\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"btn btn-success col-6 offset-3 mt-2\"\r\n\t\t\t\tonClick={handleAdding}\r\n\t\t\t>\r\n\t\t\t\tAdd interface\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { BasicRouterConfig } from \"./BasicRouterConfig\";\r\nimport { InterfaceConfig } from \"./InterfaceConfig\";\r\n\r\nexport const RouterConfiguration = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"row border-top\">\r\n\t\t\t\t\t<BasicRouterConfig />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row border-top\">\r\n\t\t\t\t\t<InterfaceConfig />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { useReducer, FC, useEffect } from \"react\";\r\nimport { GenratedScript } from \"./GenratedScript\";\r\nimport { RouterConfiguration } from \"./RouterConfiguration\";\r\n\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { RouterReducer } from \"../reducers/RouterConfigReducer\";\r\n\r\nimport { Router } from \"../types/redes-types\";\r\nimport { useSessionStorage } from \"../hooks/useLocalStorage\";\r\nimport { emptyRouterConfiguration } from \"../utils/emptyInterfaces\";\r\n\r\ninterface Props {\r\n\trouterConfigParameters: Router;\r\n\tupdateRouter: (key: string, r: Router) => void;\r\n\tid: string;\r\n}\r\n// Missing clean up\r\n\r\nexport const RouterConfigurationScreen: FC<Props> = ({\r\n\trouterConfigParameters,\r\n\tid,\r\n}) => {\r\n\tconst [value, setValue, removeValue] = useSessionStorage(\r\n\t\t`router_${id}`,\r\n\t\trouterConfigParameters\r\n\t);\r\n\r\n\tconst [routerConfig, dispatch] = useReducer(\r\n\t\tRouterReducer,\r\n\t\tvalue || emptyRouterConfiguration\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetValue(routerConfig);\r\n\t}, [routerConfig, setValue]);\r\n\r\n\tuseEffect(() => {\r\n\t\treturn () => {\r\n\t\t\tremoveValue();\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<RouterConfigContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\trouterConfig,\r\n\t\t\t\tdispatch,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div className=\"container mb-3 border shadow-sm\">\r\n\t\t\t\t<h2 className=\"text-center\">\r\n\t\t\t\t\tConfiguracion de{\" \"}\r\n\t\t\t\t\t{`${\r\n\t\t\t\t\t\trouterConfig.hostname ? `router:${routerConfig.hostname}` : \"router\"\r\n\t\t\t\t\t}`}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<RouterConfiguration />\r\n\t\t\t\t<GenratedScript />\r\n\t\t\t</div>\r\n\t\t</RouterConfigContext.Provider>\r\n\t);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSessionStorage } from \"../hooks/useLocalStorage\";\r\nimport { Router } from \"../types/redes-types\";\r\nimport { keyGeneratorFunc } from \"../utils/keyGenerator\";\r\nimport { RouterConfigurationScreen } from \"./RouterConfigurationScreen\";\r\nimport { emptyRouterConfiguration } from \"../utils/emptyInterfaces\";\r\n\r\nconst keyGenerator = keyGeneratorFunc();\r\n\r\ntype ListOfRouters = {\r\n\t[key: string]: Router;\r\n};\r\n\r\nexport const RouterApp = () => {\r\n\tconst [value, setValue] = useSessionStorage<ListOfRouters>(\r\n\t\t\"routerConfig\",\r\n\t\t{}\r\n\t);\r\n\r\n\tconst [allRouters, setAllRouters] = useState<ListOfRouters>(value ?? {});\r\n\r\n\tconst updateRouter = (key: string, r: Router) => {\r\n\t\tsetAllRouters((list) => {\r\n\t\t\tconst newList = { ...list };\r\n\t\t\tnewList[key] = r;\r\n\t\t\treturn newList;\r\n\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsetValue(allRouters);\r\n\t\tconsole.log(\"Algo se esta cambiando\");\r\n\t}, [allRouters, setValue]);\r\n\r\n\treturn (\r\n\t\t<div className=\"container my-5 px-md-5 px-1\">\r\n\t\t\t<h1>Generador de Scripts de Router</h1>\r\n\t\t\t<p>\r\n\t\t\t\tEste es un generador de Scripts de router para el examen de redes. Para\r\n\t\t\t\tusarlo, solamente picale al botón de \"Add router\" para añadir un router.{\" \"}\r\n\t\t\t</p>\r\n\t\t\t<h1>Routers</h1>\r\n\r\n\t\t\t{Object.entries(allRouters).map(([key, router]) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"container my-3\" key={key}>\r\n\t\t\t\t\t\t<RouterConfigurationScreen\r\n\t\t\t\t\t\t\trouterConfigParameters={router}\r\n\t\t\t\t\t\t\tid={key}\r\n\t\t\t\t\t\t\tupdateRouter={updateRouter}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName=\"btn btn-danger col-4 offset-4\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetAllRouters((r) => {\r\n\t\t\t\t\t\t\t\t\tconst newRouter = { ...r };\r\n\t\t\t\t\t\t\t\t\tdelete newRouter[key];\r\n\t\t\t\t\t\t\t\t\treturn newRouter;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete {router.hostname || \"Router\"}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"btn btn-success col-10 offset-1 mb-5\"\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tlet newKey = \"\";\r\n\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tnewKey = (keyGenerator.next()?.value ?? \"1\") as string;\r\n\t\t\t\t\t} while (allRouters[newKey]);\r\n\r\n\t\t\t\t\tsetAllRouters({\r\n\t\t\t\t\t\t...allRouters,\r\n\t\t\t\t\t\t[newKey]: { ...emptyRouterConfiguration },\r\n\t\t\t\t\t});\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tAdd Router\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { RouterApp } from \"./components/RouterApp\";\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<RouterApp />\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\n\nimport App from \"./App\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}