{"version":3,"sources":["hooks/useLocalStorage.tsx","utils/keyGenerator.tsx","utils/emptyInterfaces.tsx","reducers/RouterConfigReducer.tsx","context/ReactConfigContext.tsx","utils/ipAddress2network.tsx","utils/numberToSubnetMask.tsx","utils/ipAddress2diffusion.tsx","components/GenratedScript.tsx","utils/router2script.tsx","components/CheckBoxes.tsx","components/BasicRouterConfig.tsx","hooks/useForm.tsx","components/InputUseForm.tsx","components/DhcpConfig.tsx","components/Interface.tsx","hooks/useToggle.tsx","components/InterfaceConfig.tsx","components/RouterConfiguration.tsx","components/RouterConfigurationScreen.tsx","components/RouterApp.tsx","App.tsx","index.tsx"],"names":["useSessionStorage","key","defaultValue","useStorage","window","sessionStorage","storageObject","useState","jsonValue","getItem","JSON","parse","value","setValue","useEffect","undefined","removeItem","setItem","stringify","removeValue","useCallback","keyGeneratorFunc","i","toString","RouterItemConfigurable","emptyRouterConfiguration","hostname","interfaces","security","bannerMord","encription","lineConsole","vty","hasRip","emptyRouterInterface","description","interfaceCableType","type","port","ipAddress","ipMask","dhcp","dnsServer","excluded","poolName","RouterConfigContext","createContext","routerConfig","dispatch","action","regex","ipAddress2network","replace","number2subtnetMask","bitCount","mask","n","Math","min","push","pow","join","ipAddress2diffusion","GenratedScript","useContext","textJson","setTextJson","textScript","setTextScript","timeId","useRef","current","clearTimeout","setTimeout","router","script","ipNetworks","inter","network","diffussion","mascaraReal","Number","isFemale","textoInterface","ip","forEach","router2script","className","CheckBoxes","onChange","label","name","checked","htmlFor","RouterReducer","newState","payload","banner","setRip","console","eraseInterface","update","routerInterface","createNewInterface","BasicRouterConfig","placeholder","e","target","useForm","initialState","formulario","setFormulario","newValue","campo","clearFormulario","f","Object","keys","map","idx","InputUseForm","placeHolder","DhcpConfig","id_interface","dhcpInter","excludedAdds","split","cosa","trim","Interface","id","routerInter","setType","ipMas","ipAdd","descriptionForm","initial","state","setState","useToggle","toggleIsFemale","cableInter","keyGenerator","InterfaceConfig","divRef","ref","onClick","next","RouterConfiguration","RouterConfigurationScreen","routerConfigParameters","updateRouter","useReducer","Provider","RouterApp","allRouters","setAllRouters","r","list","newList","log","entries","newRouter","newKey","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.632e908b.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\n\r\nexport function useLocalStorage<T>(key: string, defaultValue: T) {\r\n\treturn useStorage(key, defaultValue, window.localStorage);\r\n}\r\nexport function useSessionStorage<T>(key: string, defaultValue: T) {\r\n\treturn useStorage(key, defaultValue, window.sessionStorage);\r\n}\r\n\r\nfunction useStorage<T>(\r\n\tkey: string,\r\n\tdefaultValue: T,\r\n\tstorageObject: Storage\r\n): [T | undefined, (v: T) => void, () => void] {\r\n\tconst [value, setValue] = useState<T | undefined>(() => {\r\n\t\tconst jsonValue = storageObject.getItem(key);\r\n\t\tif (jsonValue !== null) return JSON.parse(jsonValue) as T;\r\n\t\treturn defaultValue;\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tif (value === undefined) return storageObject.removeItem(key);\r\n\t\tstorageObject.setItem(key, JSON.stringify(value));\r\n\t}, [key, value, storageObject]);\r\n\r\n\tconst removeValue = useCallback(() => {\r\n\t\tsetValue(undefined);\r\n\t\tstorageObject.removeItem(key);\r\n\t}, []);\r\n\r\n\treturn [value, setValue, removeValue];\r\n}\r\n","export function* keyGeneratorFunc() {\r\n\tfor (let i = 0; ; i++) yield i.toString();\r\n}\r\n","import {\r\n\tRouterInterface,\r\n\tDHCPConfiguration,\r\n\tRouter,\r\n} from \"../types/redes-types\";\r\n\r\nexport const emptyRouterConfiguration: Router = {\r\n\thostname: \"\",\r\n\tinterfaces: {},\r\n\tsecurity: {\r\n\t\tbannerMord: \"\",\r\n\t\tencription: false,\r\n\t\tlineConsole: false,\r\n\t\tvty: false,\r\n\t},\r\n\thasRip: false,\r\n};\r\nexport const emptyDhcpConfiguration: DHCPConfiguration = {\r\n\tdnsServer: \"\",\r\n\texcluded: [],\r\n\tpoolName: \"\",\r\n};\r\n\r\nexport const emptyRouterInterface: RouterInterface = {\r\n\tdescription: \"\",\r\n\tinterfaceCableType: {\r\n\t\ttype: \"fastethernet\",\r\n\t\tport: \"\",\r\n\t},\r\n\tipAddress: \"\",\r\n\tipMask: \"\",\r\n\tdhcp: { ...emptyDhcpConfiguration },\r\n};\r\n","import { emptyRouterInterface } from \"../utils/emptyInterfaces\";\r\nimport {\r\n\tDHCPConfiguration,\r\n\tRouter,\r\n\tRouterInterface,\r\n} from \"../types/redes-types\";\r\n\r\nexport enum RouterItemConfigurable {\r\n\thostname,\r\n\tbanner,\r\n\tvty,\r\n\tconsole,\r\n\tencription,\r\n\teraseInterface,\r\n\tupdate,\r\n\tcreateNewInterface,\r\n\tsetRip,\r\n}\r\n\r\nexport type RouterActions =\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.hostname;\r\n\t\t\tpayload: string;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.setRip;\r\n\t\t\tpayload: {\r\n\t\t\t\tvalue: boolean;\r\n\t\t\t};\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.banner;\r\n\t\t\tpayload: string;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.vty;\r\n\t\t\tpayload: boolean;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.console;\r\n\t\t\tpayload: boolean;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.encription;\r\n\t\t\tpayload: boolean;\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.eraseInterface;\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: string;\r\n\t\t\t};\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.createNewInterface;\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: string;\r\n\t\t\t};\r\n\t  }\r\n\t| {\r\n\t\t\ttype: RouterItemConfigurable.update;\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: string;\r\n\t\t\t\trouterInterface: RouterInterface;\r\n\t\t\t};\r\n\t  };\r\n\r\nexport const RouterReducer = (\r\n\trouter: Router,\r\n\taction: RouterActions\r\n): Router => {\r\n\tlet newState: typeof router;\r\n\r\n\tswitch (action.type) {\r\n\t\tcase RouterItemConfigurable.hostname:\r\n\t\t\treturn { ...router, hostname: action.payload };\r\n\t\tcase RouterItemConfigurable.banner:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.security.bannerMord = action.payload;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.setRip:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.hasRip = action.payload.value;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.vty:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.security.vty = action.payload;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.console:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.security.lineConsole = action.payload;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.encription:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tnewState.security.encription = action.payload;\r\n\t\t\treturn newState;\r\n\t\tcase RouterItemConfigurable.eraseInterface:\r\n\t\t\tnewState = { ...router };\r\n\t\t\tdelete newState.interfaces[action.payload.key];\r\n\t\t\treturn newState;\r\n\r\n\t\tcase RouterItemConfigurable.update: {\r\n\t\t\tnewState = { ...router };\r\n\r\n\t\t\tconst { key, routerInterface } = action.payload;\r\n\r\n\t\t\tnewState.interfaces[key] = routerInterface;\r\n\r\n\t\t\treturn newState;\r\n\t\t}\r\n\t\tcase RouterItemConfigurable.createNewInterface: {\r\n\t\t\tnewState = { ...router };\r\n\r\n\t\t\tconst { key } = action.payload;\r\n\r\n\t\t\tnewState.interfaces[key] = { ...emptyRouterInterface };\r\n\r\n\t\t\treturn newState;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn router;\r\n\t}\r\n};\r\n","import { createContext } from \"react\";\r\nimport { RouterActions } from \"../reducers/RouterConfigReducer\";\r\nimport { Router } from \"../types/redes-types\";\r\nimport { emptyRouterConfiguration } from \"../utils/emptyInterfaces\";\r\n\r\nexport const RouterConfigContext = createContext<{\r\n\trouterConfig: Router;\r\n\tdispatch: (action: RouterActions) => void;\r\n}>({\r\n\trouterConfig: emptyRouterConfiguration,\r\n\tdispatch: (action: RouterActions) => {},\r\n});\r\n","const regex = /(\\d+\\.\\d+\\.\\d+)\\.\\d+/gm;\r\nconst subst = `$1.0`;\r\n\r\nexport const ipAddress2network = (ipAddress: string): string => {\r\n\treturn ipAddress.replace(regex, subst);\r\n};\r\n","export const number2subtnetMask = (bitCount: number) => {\r\n\tconst mask = [];\r\n\tfor (let i = 0; i < 4; i++) {\r\n\t\tconst n = Math.min(bitCount, 8);\r\n\t\tmask.push(256 - Math.pow(2, 8 - n));\r\n\t\tbitCount -= n;\r\n\t}\r\n\treturn mask.join(\".\");\r\n};\r\n","const regex = /(\\d+\\.\\d+\\.\\d+)\\.\\d+/gm;\r\nconst subst = `$1.255`;\r\n\r\nexport const ipAddress2diffusion = (ipAddress: string): string => {\r\n\treturn ipAddress.replace(regex, subst);\r\n};\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { router2script } from \"../utils/router2script\";\r\n\r\nexport const GenratedScript = () => {\r\n\tconst { routerConfig } = useContext(RouterConfigContext);\r\n\r\n\tconst [textJson, setTextJson] = useState(\"\");\r\n\tconst [textScript, setTextScript] = useState(\"Todavía nada\");\r\n\tconst timeId = useRef<NodeJS.Timeout | null>(null);\r\n\r\n\tuseEffect(() => {\r\n\t\ttimeId.current && clearTimeout(timeId.current);\r\n\r\n\t\ttimeId.current = setTimeout(() => {\r\n\t\t\tsetTextJson(JSON.stringify(routerConfig, null, 2));\r\n\t\t\tsetTextScript(router2script(routerConfig));\r\n\t\t}, 1000);\r\n\t}, [routerConfig]);\r\n\r\n\treturn (\r\n\t\t<p className=\"container mt-2\">\r\n\t\t\t<h2 className=\"text-center\">Script de {routerConfig.hostname || \"\"}</h2>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<h3 className=\"col-5\">JSON generado </h3>\r\n\t\t\t\t<h3 className=\"col-7\">Script generado </h3>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<pre className=\"col-4 text-break \">{textJson}</pre>\r\n\t\t\t\t<pre className=\"col-7 text-break\">{textScript}</pre>\r\n\t\t\t</div>\r\n\t\t</p>\r\n\t);\r\n};\r\n","import { Router } from \"../types/redes-types\";\r\nimport { ipAddress2network } from \"./ipAddress2network\";\r\nimport { number2subtnetMask } from \"./numberToSubnetMask\";\r\nimport { ipAddress2diffusion } from \"./ipAddress2diffusion\";\r\n\r\nconst lineConsole = `enable secret cisco\r\nline console 0\r\npassword cisco\r\nlogin\r\nexit`;\r\n\r\nconst lineVty = `line vty 0 4\r\npassword cisco\r\nlogin\r\nexit`;\r\n\r\nconst encription = \"service password-encryption\";\r\n\r\n// ! hacer que tenga mascara el dhcp network\r\nexport const router2script = (router: Router): string => {\r\n\tconst { hostname, security, hasRip } = router;\r\n\r\n\tlet script = `\r\nenable\r\nconfigure terminal \r\nhostname ${hostname}\r\n${security.lineConsole ? lineConsole : \"\"}\r\n${security.vty ? lineVty : \"\"}\r\nbanner motd #${security.bannerMord}#\r\n${security.encription ? encription : \"\"}\r\n`;\r\n\r\n\tconst ipNetworks: string[] = [];\r\n\r\n\t// Interfaces\r\n\tfor (const key in router.interfaces) {\r\n\t\tconst inter = router.interfaces[key];\r\n\r\n\t\tconst { description, ipAddress, ipMask, interfaceCableType, dhcp } = inter;\r\n\r\n\t\tconst { dnsServer, excluded, poolName } = dhcp;\r\n\r\n\t\tconst { port, type } = interfaceCableType;\r\n\t\tconst network = ipAddress2network(ipAddress),\r\n\t\t\tdiffussion = ipAddress2diffusion(ipAddress),\r\n\t\t\tmascaraReal = number2subtnetMask(Number(ipMask));\r\n\r\n\t\thasRip && ipNetworks.push(network);\r\n\r\n\t\tlet isFemale =\r\n\t\t\tinter.interfaceCableType.type === \"serial\"\r\n\t\t\t\t? inter.interfaceCableType.isFemale\r\n\t\t\t\t: false;\r\n\r\n\t\tconst textoInterface = `interface ${type} ${port}\r\n${isFemale ? \"clock rate 64000\" : \"\"}\r\ndescription ${description}\r\nip address ${ipAddress} ${mascaraReal}\r\nno shutdown\r\nexit\r\n`;\r\n\r\n\t\tscript += textoInterface;\r\n\r\n\t\tif (interfaceCableType.type === \"serial\") continue;\r\n\t\tscript += `ip dhcp pool ${poolName}\r\ndefault-router ${ipAddress}\r\nnetwork ${network} ${mascaraReal}\r\n${dnsServer !== \"\" ? `dns-server ${dnsServer}` : \"\"}\r\nip dhcp excluded-address ${ipAddress}\r\nip dhcp excluded-address ${diffussion}\r\n${\r\n\tdiffussion === dnsServer || dnsServer === \"\"\r\n\t\t? \"\"\r\n\t\t: `ip dhcp excluded-address ${dnsServer}`\r\n}\r\n`;\r\n\r\n\t\tfor (const ip of excluded) {\r\n\t\t\tif (ip === \"\") continue;\r\n\t\t\tscript += `ip dhcp excluded-address ${ip}\\n`;\r\n\t\t}\r\n\r\n\t\tscript += \"exit\\n\";\r\n\t}\r\n\r\n\t// Rip\r\n\r\n\tif (hasRip) {\r\n\t\tscript += \"router rip\\nversion 2\\n\";\r\n\r\n\t\tipNetworks.forEach((network) => {\r\n\t\t\tscript += `network ${network}\\n`;\r\n\t\t});\r\n\t}\r\n\r\n\tscript += \"exit\\n\";\r\n\treturn script;\r\n};\r\n","import { FC } from \"react\";\r\n\r\ninterface props {\r\n\tlabel: string;\r\n\tvalue: boolean;\r\n\tonChange: () => void;\r\n\tname: string;\r\n}\r\n\r\nexport const CheckBoxes: FC<props> = ({ onChange, label, value, name }) => {\r\n\treturn (\r\n\t\t<div className=\"form-check\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"form-check-input\"\r\n\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\tchecked={value}\r\n\t\t\t\tname={name}\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t/>\r\n\t\t\t<label className=\"form-check-label\" htmlFor={name}>\r\n\t\t\t\t{label}\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { CheckBoxes } from \"./CheckBoxes\";\r\nimport { RouterItemConfigurable } from \"../reducers/RouterConfigReducer\";\r\nexport const BasicRouterConfig = () => {\r\n\tconst { routerConfig, dispatch } = useContext(RouterConfigContext);\r\n\r\n\tconst { hostname, security, hasRip } = routerConfig;\r\n\r\n\tconst { bannerMord, encription, lineConsole, vty } = security;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>Configuración básica</h3>\r\n\t\t\t<div className=\"col col-6\">\r\n\t\t\t\t<label htmlFor=\"hostname\" className=\"form-label\">\r\n\t\t\t\t\tPoner el hostname\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tname=\"hostname\"\r\n\t\t\t\t\tplaceholder=\"Hostname del router\"\r\n\t\t\t\t\tvalue={hostname}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.hostname,\r\n\t\t\t\t\t\t\tpayload: e.target.value,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<label htmlFor=\"banner\" className=\"form-label\">\r\n\t\t\t\t\tPoner el banner\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tname=\"banner\"\r\n\t\t\t\t\tplaceholder=\"banner del router\"\r\n\t\t\t\t\tvalue={bannerMord}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.banner,\r\n\t\t\t\t\t\t\tpayload: e.target.value,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t{/* Chekc boxes */}\r\n\r\n\t\t\t<div className=\"col col-6\">\r\n\t\t\t\t<CheckBoxes\r\n\t\t\t\t\tlabel={\"Tiene encription\"}\r\n\t\t\t\t\tname={\"encription\"}\r\n\t\t\t\t\tvalue={encription}\r\n\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.encription,\r\n\t\t\t\t\t\t\tpayload: !encription,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<CheckBoxes\r\n\t\t\t\t\tlabel={\"Tiene line console security\"}\r\n\t\t\t\t\tname={\"lineconsole\"}\r\n\t\t\t\t\tvalue={lineConsole}\r\n\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.console,\r\n\t\t\t\t\t\t\tpayload: !lineConsole,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<CheckBoxes\r\n\t\t\t\t\tlabel={\"Tiene vty\"}\r\n\t\t\t\t\tname={\"vty\"}\r\n\t\t\t\t\tvalue={vty}\r\n\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.vty,\r\n\t\t\t\t\t\t\tpayload: !vty,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<CheckBoxes\r\n\t\t\t\t\tlabel={\"Tiene rip\"}\r\n\t\t\t\t\tname={\"vty\"}\r\n\t\t\t\t\tvalue={hasRip}\r\n\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\ttype: RouterItemConfigurable.setRip,\r\n\t\t\t\t\t\t\tpayload: { value: !hasRip },\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = <T extends Object>(initialState: T) => {\r\n\tconst [formulario, setFormulario] = useState<T>(initialState);\r\n\r\n\tconst onChange = (newValue: string, campo: keyof T) => {\r\n\t\tsetFormulario({\r\n\t\t\t...formulario,\r\n\t\t\t[campo]: newValue,\r\n\t\t});\r\n\t};\r\n\r\n\tconst clearFormulario = () => {\r\n\t\tsetFormulario((f) => {\r\n\t\t\tObject.keys(f).map((key, idx) => {\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tf[key] = \"\";\r\n\t\t\t});\r\n\t\t\treturn f;\r\n\t\t});\r\n\t};\r\n\r\n\treturn {\r\n\t\t...formulario,\r\n\t\tformulario,\r\n\t\tonChange,\r\n\t\tclearFormulario,\r\n\t};\r\n};\r\n\r\n/** Example\r\n * export const Formularios = () => {\r\n\tconst { email, password, onChange, formulario } = useForm({\r\n\t\tpassword: \"871984\",\r\n\t\temail: \"josifj@uiwfh.com\",\r\n\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>Formularios</h3>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tclassName=\"form-control my-2\"\r\n\t\t\t\tplaceholder=\"Tu password\"\r\n\t\t\t\tvalue={password}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value, \"password\")}\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"email\"\r\n\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\tplaceholder=\"Tu email\"\r\n\t\t\t\tvalue={email}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value, \"email\")}\r\n\t\t\t/>\r\n\t\t\t<p>\r\n\t\t\t\t<pre>{JSON.stringify(formulario)}</pre>\r\n\t\t\t</p>\r\n\t\t</>\r\n\t);\r\n};\r\n * \r\n * \r\n */\r\n","import React, { FC } from \"react\";\r\n\r\ninterface Props {\r\n\tname: string;\r\n\tlabel: string;\r\n\tplaceHolder: string;\r\n\tvalue: string;\r\n\tonChange: Function;\r\n}\r\n\r\nexport const InputUseForm: FC<Props> = ({\r\n\tname,\r\n\tlabel,\r\n\tplaceHolder,\r\n\tvalue,\r\n\tonChange,\r\n}) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<label htmlFor={name} className=\"form-label\">\r\n\t\t\t\t{label}\r\n\t\t\t</label>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\tname={name}\r\n\t\t\t\tplaceholder={placeHolder}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\tonChange(e.target.value, name);\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { FC, useContext, useEffect } from \"react\";\r\nimport { RouterInterface } from \"../types/redes-types\";\r\nimport { useForm } from \"../hooks/useForm\";\r\nimport { InputUseForm } from \"./InputUseForm\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { RouterItemConfigurable } from \"../reducers/RouterConfigReducer\";\r\n\r\ninterface Props {\r\n\tid_interface: string;\r\n\trouterInterface: RouterInterface;\r\n}\r\n\r\nexport const DhcpConfig: FC<Props> = ({ id_interface, routerInterface }) => {\r\n\tconst { dispatch } = useContext(RouterConfigContext);\r\n\r\n\tconst { dhcp: dhcpInter } = routerInterface;\r\n\r\n\tconst { dnsServer, poolName, excluded, formulario, onChange } = useForm({\r\n\t\tdnsServer: dhcpInter.dnsServer,\r\n\t\tpoolName: dhcpInter.poolName,\r\n\t\texcluded: dhcpInter.excluded.join(\",\"),\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst excludedAdds = formulario.excluded\r\n\t\t\t.split(\",\")\r\n\t\t\t.map((cosa) => cosa.trim());\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: RouterItemConfigurable.update,\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: id_interface,\r\n\t\t\t\trouterInterface: {\r\n\t\t\t\t\t...routerInterface,\r\n\t\t\t\t\tdhcp: {\r\n\t\t\t\t\t\tdnsServer,\r\n\t\t\t\t\t\tpoolName,\r\n\t\t\t\t\t\texcluded: excludedAdds,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\t}, [dispatch, dnsServer, excluded, poolName]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h5>DHCP Configuration {`DHCP::${poolName}` ?? \"\"}</h5>\r\n\t\t\t<div className=\"dhcp-config-form\">\r\n\t\t\t\t<InputUseForm\r\n\t\t\t\t\tlabel=\"Pon el nombre del pool name\"\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tvalue={poolName}\r\n\t\t\t\t\tplaceHolder={\"Pon el poolName\"}\r\n\t\t\t\t\tname={\"poolName\"}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<InputUseForm\r\n\t\t\t\t\tlabel=\"Pon la ip del dnsServer\"\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tvalue={dnsServer}\r\n\t\t\t\t\tplaceHolder={\"Pon el dnsServer\"}\r\n\t\t\t\t\tname={\"dnsServer\"}\r\n\t\t\t\t/>\r\n\t\t\t\t<InputUseForm\r\n\t\t\t\t\tlabel=\"Pon las ip excluidas, separadas por commas\"\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tvalue={excluded}\r\n\t\t\t\t\tplaceHolder={\"Pon el excluded\"}\r\n\t\t\t\t\tname={\"excluded\"}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { useState, useContext } from \"react\";\r\nimport { CheckBoxes } from \"./CheckBoxes\";\r\nimport { useForm } from \"../hooks/useForm\";\r\nimport { useEffect } from \"react\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { RouterItemConfigurable } from \"../reducers/RouterConfigReducer\";\r\nimport { RouterInterface, RouterInterfaceCables } from \"../types/redes-types\";\r\nimport { useToggle } from \"../hooks/useToggle\";\r\nimport { DhcpConfig } from \"./DhcpConfig\";\r\nimport { InputUseForm } from \"./InputUseForm\";\r\nimport { keyGeneratorFunc } from \"../utils/keyGenerator\";\r\nimport { emptyDhcpConfiguration } from \"../utils/emptyInterfaces\";\r\n\r\ntype CableTypes = \"serial\" | \"fastethernet\" | \"gigabitethernet\";\r\n\r\nconst keyGenerator = keyGeneratorFunc();\r\n\r\nexport const Interface: FC<{ id: string; routerInter: RouterInterface }> = ({\r\n\tid,\r\n\trouterInter,\r\n}) => {\r\n\tconst { description, interfaceCableType, ipMask, ipAddress, dhcp } =\r\n\t\trouterInter;\r\n\r\n\tconst { dispatch } = useContext(RouterConfigContext);\r\n\r\n\tconst [type, setType] = useState(interfaceCableType.type);\r\n\r\n\tconst { onChange, ipAdd, ipMas, descriptionForm, port } = useForm({\r\n\t\tipMas: ipMask,\r\n\t\tipAdd: ipAddress,\r\n\t\tport: interfaceCableType.port,\r\n\t\tdescriptionForm: description,\r\n\t});\r\n\r\n\tconst [isFemale, toggleIsFemale] = useToggle(\r\n\t\tinterfaceCableType.type === \"serial\" && interfaceCableType.isFemale\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst cableInter: RouterInterfaceCables =\r\n\t\t\ttype === \"serial\"\r\n\t\t\t\t? {\r\n\t\t\t\t\t\ttype: \"serial\",\r\n\t\t\t\t\t\tisFemale,\r\n\t\t\t\t\t\tport,\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\t\ttype,\r\n\r\n\t\t\t\t\t\tport,\r\n\t\t\t\t  };\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: RouterItemConfigurable.update,\r\n\t\t\tpayload: {\r\n\t\t\t\tkey: id,\r\n\t\t\t\trouterInterface: {\r\n\t\t\t\t\t...routerInter,\r\n\t\t\t\t\tdescription: descriptionForm,\r\n\t\t\t\t\tinterfaceCableType: cableInter,\r\n\t\t\t\t\tipAddress: ipAdd,\r\n\t\t\t\t\tipMask: ipMas,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\t}, [isFemale, descriptionForm, dispatch, id, ipAdd, ipMas, port, type]);\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4 className=\"text-center\">Configuración para {descriptionForm}</h4>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t<strong>Select Type of cable</strong>\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tclassName=\"form-select\"\r\n\t\t\t\t\t\taria-label=\"Default select example\"\r\n\t\t\t\t\t\tvalue={type}\r\n\t\t\t\t\t\tonChange={(e) => setType(e.target.value as CableTypes)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value={\"fastethernet\"}>Fast Ethernet</option>\r\n\t\t\t\t\t\t<option value={\"serial\"}>Serial </option>\r\n\t\t\t\t\t\t<option value={\"gigabitethernet\"}>Gigabit</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t{type === \"serial\" && (\r\n\t\t\t\t\t\t<CheckBoxes\r\n\t\t\t\t\t\t\tlabel=\"Es hembra?\"\r\n\t\t\t\t\t\t\tvalue={isFemale}\r\n\t\t\t\t\t\t\tname=\"es-hembra\"\r\n\t\t\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\t\t\ttoggleIsFemale();\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t<InputUseForm\r\n\t\t\t\t\t\tlabel=\"Pon el port number\"\r\n\t\t\t\t\t\tname=\"port\"\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\tplaceHolder=\"Port number\"\r\n\t\t\t\t\t\tvalue={port}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<InputUseForm\r\n\t\t\t\t\t\tlabel=\"Pon el description\"\r\n\t\t\t\t\t\tname=\"descriptionForm\"\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\tplaceHolder=\"description\"\r\n\t\t\t\t\t\tvalue={descriptionForm}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<strong>Ip address</strong> <br />\r\n\t\t\t<small>Pones la direccion normal y luego pones diagonal algo</small>\r\n\t\t\t<div className=\"input-group\">\r\n\t\t\t\t<div className=\"col-9\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tclassName=\"form-control col-9\"\r\n\t\t\t\t\t\tname=\"ipAddress\"\r\n\t\t\t\t\t\tplaceholder=\"ipAddress del router\"\r\n\t\t\t\t\t\tvalue={ipAdd}\r\n\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\tonChange(e.target.value, \"ipAdd\");\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<span className=\"input-group-text\">/</span>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tname=\"ipMask\"\r\n\t\t\t\t\tplaceholder=\"ex. 24\"\r\n\t\t\t\t\tvalue={ipMas}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tonChange(e.target.value, \"ipMas\");\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t{routerInter.interfaceCableType.type !== \"serial\" && (\r\n\t\t\t\t<div className=\"dhcp-config-container mt-4\">\r\n\t\t\t\t\t<DhcpConfig id_interface={id} routerInterface={routerInter} />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport const useToggle = (initial: boolean = false): [boolean, () => void] => {\r\n\tconst [state, setState] = useState(initial);\r\n\r\n\tconst toggle = () => {\r\n\t\tsetState(!state);\r\n\t};\r\n\r\n\treturn [state, toggle];\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport { Interface } from \"./Interface\";\r\nimport { useContext } from \"react\";\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { RouterItemConfigurable } from \"../reducers/RouterConfigReducer\";\r\nimport { keyGeneratorFunc } from \"../utils/keyGenerator\";\r\n\r\nconst keyGenerator = keyGeneratorFunc();\r\n\r\nexport const InterfaceConfig = () => {\r\n\tconst { routerConfig, dispatch } = useContext(RouterConfigContext);\r\n\r\n\tconst divRef = useRef<null | HTMLDivElement>(null);\r\n\r\n\tconst handleAdding = () => {\r\n\t\tconst key = (keyGenerator?.next()?.value as string) ?? \"1\";\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: RouterItemConfigurable.createNewInterface,\r\n\t\t\tpayload: {\r\n\t\t\t\tkey,\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>Configuración de las interfaces</h3>\r\n\t\t\t<div className=\"interfaces\" ref={divRef}>\r\n\t\t\t\t{Object.keys(routerConfig.interfaces).map((key) => {\r\n\t\t\t\t\tconst inter = routerConfig.interfaces[key];\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div key={key} className=\"interface row\">\r\n\t\t\t\t\t\t\t<div className=\"my-1\">\r\n\t\t\t\t\t\t\t\t<Interface id={key} routerInter={inter} />\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger col-4 offset-8\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\t\t\t\t\ttype: RouterItemConfigurable.eraseInterface,\r\n\t\t\t\t\t\t\t\t\t\t\tpayload: {\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tEliminar interface\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"btn btn-success col-6 offset-3 mt-2\"\r\n\t\t\t\tonClick={handleAdding}\r\n\t\t\t>\r\n\t\t\t\tAdd interface\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { BasicRouterConfig } from \"./BasicRouterConfig\";\r\nimport { InterfaceConfig } from \"./InterfaceConfig\";\r\n\r\nexport const RouterConfiguration = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<BasicRouterConfig />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<InterfaceConfig />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { useReducer, FC, useEffect } from \"react\";\r\nimport { GenratedScript } from \"./GenratedScript\";\r\nimport { RouterConfiguration } from \"./RouterConfiguration\";\r\n\r\nimport { RouterConfigContext } from \"../context/ReactConfigContext\";\r\nimport { RouterReducer } from \"../reducers/RouterConfigReducer\";\r\n\r\nimport { Router } from \"../types/redes-types\";\r\nimport { useSessionStorage } from \"../hooks/useLocalStorage\";\r\nimport { emptyRouterConfiguration } from \"../utils/emptyInterfaces\";\r\n\r\ninterface Props {\r\n\trouterConfigParameters: Router;\r\n\tupdateRouter: (key: string, r: Router) => void;\r\n\tid: string;\r\n}\r\n// Missing clean up\r\n\r\nexport const RouterConfigurationScreen: FC<Props> = ({\r\n\trouterConfigParameters,\r\n\tupdateRouter,\r\n\tid,\r\n}) => {\r\n\tconst [value, setValue, removeValue] = useSessionStorage(\r\n\t\t`router_${id}`,\r\n\t\trouterConfigParameters\r\n\t);\r\n\r\n\tconst [routerConfig, dispatch] = useReducer(\r\n\t\tRouterReducer,\r\n\t\tvalue || emptyRouterConfiguration\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetValue(routerConfig);\r\n\t}, [routerConfig, setValue]);\r\n\r\n\tuseEffect(() => {\r\n\t\treturn () => {\r\n\t\t\tremoveValue();\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<RouterConfigContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\trouterConfig,\r\n\t\t\t\tdispatch,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div className=\"container mb-5 px-5\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<b>¿Como usarlo?</b> <br /> Puedes usar la configuracion llenando la\r\n\t\t\t\t\tinformacion necesaria en las siguientes partes\r\n\t\t\t\t</p>\r\n\t\t\t\t<h2 className=\"text-center\">\r\n\t\t\t\t\tConfiguracion de {`Router::${routerConfig.hostname}` || \"router\"}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<RouterConfiguration />\r\n\t\t\t\t<GenratedScript />\r\n\t\t\t</div>\r\n\t\t</RouterConfigContext.Provider>\r\n\t);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSessionStorage } from \"../hooks/useLocalStorage\";\r\nimport { Router } from \"../types/redes-types\";\r\nimport { keyGeneratorFunc } from \"../utils/keyGenerator\";\r\nimport { RouterConfigurationScreen } from \"./RouterConfigurationScreen\";\r\nimport { emptyRouterConfiguration } from \"../utils/emptyInterfaces\";\r\n\r\nconst keyGenerator = keyGeneratorFunc();\r\n\r\ntype ListOfRouters = {\r\n\t[key: string]: Router;\r\n};\r\n\r\nexport const RouterApp = () => {\r\n\tconst [value, setValue] = useSessionStorage<ListOfRouters>(\r\n\t\t\"routerConfig\",\r\n\t\t{}\r\n\t);\r\n\r\n\tconst [allRouters, setAllRouters] = useState<ListOfRouters>(value ?? {});\r\n\r\n\tconst updateRouter = (key: string, r: Router) => {\r\n\t\tsetAllRouters((list) => {\r\n\t\t\tconst newList = { ...list };\r\n\t\t\tnewList[key] = r;\r\n\t\t\treturn newList;\r\n\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsetValue(allRouters);\r\n\t\tconsole.log(\"Algo se esta cambiando\");\r\n\t}, [allRouters, setValue]);\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{Object.entries(allRouters).map(([key, router]) => {\r\n\t\t\t\tconsole.log(\"Debería anadir un router aqui\");\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"container my-3\" key={key}>\r\n\t\t\t\t\t\t<RouterConfigurationScreen\r\n\t\t\t\t\t\t\trouterConfigParameters={router}\r\n\t\t\t\t\t\t\tid={key}\r\n\t\t\t\t\t\t\tupdateRouter={updateRouter}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName=\"btn btn-danger col-4 offset-4\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetAllRouters((r) => {\r\n\t\t\t\t\t\t\t\t\tconst newRouter = { ...r };\r\n\t\t\t\t\t\t\t\t\tdelete newRouter[key];\r\n\t\t\t\t\t\t\t\t\treturn newRouter;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete {router.hostname || \"Router\"}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"btn btn-success col-10 offset-1 mb-5\"\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tlet newKey = \"\";\r\n\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tnewKey = (keyGenerator.next()?.value ?? \"1\") as string;\r\n\t\t\t\t\t} while (allRouters[newKey]);\r\n\r\n\t\t\t\t\tsetAllRouters({\r\n\t\t\t\t\t\t...allRouters,\r\n\t\t\t\t\t\t[newKey]: { ...emptyRouterConfiguration },\r\n\t\t\t\t\t});\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tAdd Router\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { RouterApp } from \"./components/RouterApp\";\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<RouterApp />\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\n\nimport App from \"./App\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}